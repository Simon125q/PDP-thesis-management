package layouts

import "thesis-management-app/views/components"

templ Base(nav bool) {
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Thesis Management App</title>
    <link rel="icon" type="image/png" href="/public/imgs/browser_icon.png" sizes="32x32" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="../../public/styles.css" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/htmx.org@2.0.3" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            function handleSuggestionClicked(event) {
                const suggestionText = event.target.textContent;
                const inputElement = event.target.closest('.suggestion-container').querySelector('.input-form');
                if (inputElement) {
                    inputElement.value = suggestionText;
                }
                const suggestionList = event.target.closest('.suggestion-container').querySelector('.suggestions');
                suggestionList.style.display = 'none';
            }
            function handleSuggestionClickedForEmployee(event) {
                const suggestionText = event.target.textContent;
                const parts = suggestionText.split('  ');
                const title = parts[0] || '';
                const name = parts[1] || '';
                const surname = parts[2] || '';

                const inputElementTitle = event.target.closest('.employee-suggestion-container').querySelector('.input-form-title');
                if (inputElementTitle) {
                    const normalizedTitle = title.trim().toLowerCase();
                    const titleMapping = {
                        "inż.": ["inż.", "inż"],
                        "mgr": ["mgr.", "mgr"],
                        "mgr inż.": ["mgr inż.", "mgr. inż.", "Mgr inż."],
                        "dr inż.": [
                            "dr.", "dr inż. + mgr inż.",
                            "dr inż.", "dr", "dr inż", "Dr inż.", "Dr."
                        ],
                        "dr hab. inż.": ["dr hab. inż.", "dr hab.", "dr. hab."],
                        "prof. dr hab. inż.": [
                            "prof. dr inż.", "prof. dr hab. inż.", "prof. dr hab.", "prof.",
                            "Prof. dr hab.", "prof. dr hab. inż. + mgr", "prof. dr hab. inż. + mgr inż.",
                            "Prof. Dr hab. inż."
                        ]
                    };
                    let mappedValue = null;
                    for (const [key, variations] of Object.entries(titleMapping)) {
                        if (variations.some(variation => normalizedTitle === variation.toLowerCase())) {
                            mappedValue = key;
                            break;
                        }
                    }
                    if (mappedValue) {
                        inputElementTitle.value = mappedValue;            
                    } else {
                        // If no mapping is found, set the original title as a fallback
                        inputElementTitle.value = title;
                    }
                }

                const inputElementName = event.target.closest('.employee-suggestion-container').querySelector('.input-form-name');
                if (inputElementName) {
                    inputElementName.value = name;
                }

                const inputElementSurname = event.target.closest('.employee-suggestion-container').querySelector('.input-form-surname');
                if (inputElementSurname) {
                    inputElementSurname.value = surname;
                }


                const suggestionList = event.target.closest('.suggestion-container').querySelector('.suggestions');
                suggestionList.style.display = 'none';
            }
            function attachListeners() {
                document.querySelectorAll('.suggestion-container').forEach(function(container) {
                    container.addEventListener('click', function(event) {
                        if (event.target.classList.contains('suggestion')) {
                            handleSuggestionClicked(event);
                        }
                    });
                });
                document.querySelectorAll('.employee-suggestion-container').forEach(function(container) {
                    container.addEventListener('click', function(event) {
                        if (event.target.classList.contains('suggestion')) {
                            handleSuggestionClickedForEmployee(event);
                        }
                    });
                });
            }
            function handleFocus(event) {
                // Hide all suggestion lists first
                document.querySelectorAll('.suggestions').forEach(function(suggestionList) {
                    suggestionList.style.display = 'none';

                });

                // Display the suggestion list for the current input
                const container = event.target.closest('.suggestion-container');
                if (container) {
                    const suggestionList = container.querySelector('.suggestions');
                    if (suggestionList) {
                        suggestionList.style.display = 'block';
                    }
                }
            }
            function handleClickOutside(event) {
                // Check if the click is outside any suggestion container
                const isClickInside = event.target.closest('.suggestion-container');
                if (!isClickInside) {
                    // Hide all suggestion lists
                    document.querySelectorAll('.suggestions').forEach(function (suggestionList) {
                        suggestionList.style.display = 'none';
                    });
                }
            }

            document.body.addEventListener('htmx:afterSwap', function(event) {
                attachListeners();
                document.querySelectorAll('.input-form').forEach(function(inputElement) {
                    inputElement.addEventListener('focus', handleFocus);
                });
            });
            document.addEventListener('click', handleClickOutside);

        });
    </script>
</head>

<body class="antialiased">
    if nav {
    @components.Navigation()
    }
    { children... }
    if nav {
    @components.Footer()
    }
</body>

</html>
}
